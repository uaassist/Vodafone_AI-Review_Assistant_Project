document.addEventListener('DOMContentLoaded', () => {
    // --- Element selectors ---
    const contentArea = document.getElementById('content-area');
    const welcomeScreen = document.getElementById('welcome-screen');
    const choiceScreen = document.getElementById('choice-screen');
    const chatView = document.getElementById('chat-view');
    const recoveryScreen = document.getElementById('recovery-screen');
    const chatBody = document.getElementById('chat-body');
    const quickRepliesContainer = document.getElementById('quick-replies-container');
    const progressContainer = document.getElementById('progress-container');

    // --- –Ñ–î–ò–ù–ò–ô –¶–ï–ù–¢–†–ê–õ–Ü–ó–û–í–ê–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –ü–û–î–Ü–ô ---
    contentArea.addEventListener('click', (event) => {
        const button = event.target.closest('button');
        if (!button) return; // –Ø–∫—â–æ –∫–ª—ñ–∫ –±—É–≤ –Ω–µ –ø–æ –∫–Ω–æ–ø—Ü—ñ, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ

        // 1. –¢–∞–∫—Ç–∏–ª—å–Ω–∏–π –≤—ñ–¥–≥—É–∫ –Ω–∞ –±—É–¥—å-—è–∫–µ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏
        try { navigator.vibrate(10); } catch (e) {}

        // 2. –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º—É–ª—å—Ç–∏-–≤–∏–±–æ—Ä—É (–¥–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω toggle)
        if (button.classList.contains('quick-reply-btn') && !button.hasAttribute('id')) {
            button.classList.toggle('selected');
            return; // –ó–∞–≤–µ—Ä—à—É—î–º–æ –æ–±—Ä–æ–±–∫—É —Ç—É—Ç
        }

        // 3. –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –∫–Ω–æ–ø–æ–∫ –∑–∞ —ó—Ö ID
        const buttonId = button.id;
        switch (buttonId) {
            // –ù–∞–≤—ñ–≥–∞—Ü—ñ—è
            case 'great-btn': welcomeScreen.style.display = 'none'; choiceScreen.classList.remove('hidden'); break;
            case 'okay-btn': case 'bad-btn': welcomeScreen.style.display = 'none'; recoveryScreen.classList.remove('hidden'); break;
            case 'ai-draft-btn': choiceScreen.style.display = 'none'; startConversation("–í—Å–µ –±—É–ª–æ —á—É–¥–æ–≤–æ!"); break;
            case 'manual-review-btn': window.open(googleReviewUrl, '_blank'); choiceScreen.innerHTML = `<h1 class="main-title">–î—è–∫—É—î–º–æ!</h1><p class="subtitle">–ú–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ Google —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.</p>`; break;
            
            // –ï–∫—Ä–∞–Ω –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º
            case 'request-assistance-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏...'); break;
            case 'schedule-callback-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞...'); break;
            case 'start-return-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...'); break;
            case 'google-review-fallback-btn': window.open(googleReviewUrl, '_blank'); recoveryScreen.innerHTML = `<h1 class="main-title">–î—è–∫—É—î–º–æ!</h1><p class="subtitle">–ú–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ Google —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.</p>`; break;

            // –ö–Ω–æ–ø–∫–∏ –¥—ñ–π —É —á–∞—Ç—ñ
            case 'continue-btn': handleContinueClick(); break;
            case 'regenerate-review-btn': getAIResponse("–¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º —Ç–µ, —Å–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.", true); break;
            case 'post-review-btn': handlePostReviewClick(); break;
        }
    });

    function updateProgressBar(step) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function startConversation(firstMessage) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }

    let conversationHistory = [];
    const placeId = 'Your_Google_Place_ID_Here';
    const googleReviewUrl = `https://search.google.com/local/writereview?placeid=${placeId}`;
    const avatarUrl = 'https://ucarecdn.com/c679e989-5032-408b-ae8a-83c7d204c67d/Vodafonebot.webp';

    function addMessage(sender, text, isHtml = false, isQuestion = false) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    async function getAIResponse(userMessage) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function showTypingIndicator() { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function removeTypingIndicator() { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function processAIResponse(text) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function handleFinalQuestion(question) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function createEditableDraft(reviewText) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    
    // --- –û–ù–û–í–õ–ï–ù–Ü –§–£–ù–ö–¶–Ü–á –°–¢–í–û–†–ï–ù–ù–Ø –ö–ù–û–ü–û–ö ---

    function createMultiSelectButtons(options, step) {
        clearQuickReplies();
        options.forEach(optionText => {
            const button = document.createElement('button');
            button.className = 'quick-reply-btn';
            button.innerText = optionText;
            // –ë–Ü–õ–¨–®–ï –ù–ï–ú–ê–Ñ –ü–†–Ø–ú–û–ì–û .onclick
            quickRepliesContainer.appendChild(button);
        });
        const continueButton = document.createElement('button');
        continueButton.className = 'quick-reply-btn continue-btn';
        continueButton.id = 'continue-btn'; // –î–æ–¥–∞—î–º–æ ID –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        continueButton.dataset.step = step; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫—Ä–æ–∫ —É data-–∞—Ç—Ä–∏–±—É—Ç—ñ
        continueButton.innerText = '–î–∞–ª—ñ';
        // –ë–Ü–õ–¨–®–ï –ù–ï–ú–ê–Ñ –ü–†–Ø–ú–û–ì–û .onclick
        quickRepliesContainer.appendChild(continueButton);
    }

    function createPostButtons() {
        clearQuickReplies();
        const postButton = document.createElement('button');
        postButton.className = 'quick-reply-btn primary-action choice-button';
        postButton.id = 'post-review-btn'; // –î–æ–¥–∞—î–º–æ ID –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        postButton.innerHTML = `<div class="button-main-text">‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏ Google –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó</div><div class="button-sub-text">–í–∞—à –≤—ñ–¥–≥—É–∫ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—Ç–µ —Ç–∞ –æ—Ü—ñ–Ω—ñ—Ç—å</div>`;
        
        const regenerateButton = document.createElement('button');
        regenerateButton.className = 'quick-reply-btn';
        regenerateButton.id = 'regenerate-review-btn'; // –î–æ–¥–∞—î–º–æ ID –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        regenerateButton.innerText = 'üîÑ –Ü–Ω—à–∞ –≤–µ—Ä—Å—ñ—è';
        
        quickRepliesContainer.appendChild(regenerateButton);
        quickRepliesContainer.appendChild(postButton);
    }

    // --- –ù–û–í–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –û–ë–†–û–ë–ö–ò –î–Ü–ô ---

    function handleContinueClick() {
        const continueButton = document.getElementById('continue-btn');
        const step = continueButton.dataset.step;
        const selectedButtons = quickRepliesContainer.querySelectorAll('.quick-reply-btn.selected');
        const selectedKeywords = Array.from(selectedButtons).map(btn => btn.innerText);
        let combinedMessage = selectedKeywords.length > 0 ? selectedKeywords.join(', ') : "–ù—ñ—á–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –≤–∏–¥—ñ–ª–µ–Ω–æ";
        if (step === 'purpose') {
            combinedMessage = `–ú–µ—Ç–∞ –≤—ñ–∑–∏—Ç—É: ${combinedMessage}`;
        } else if (step === 'experience') {
            combinedMessage = `–í—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: ${combinedMessage}`;
        }
        getAIResponse(combinedMessage);
    }

    function handlePostReviewClick() {
        const draftText = document.getElementById('review-draft-textarea').value;
        window.open(googleReviewUrl, '_blank');
        navigator.clipboard.writeText(draftText);
        clearQuickReplies();
        addMessage('concierge', "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!");
    }

    function clearQuickReplies() {
        quickRepliesContainer.innerHTML = '';
    }

    // --- –¢–Ü–õ–ê –§–£–ù–ö–¶–Ü–ô, –©–û –ù–ï –ó–ú–Ü–ù–ò–õ–ò–°–Ø ---
    updateProgressBar = function(step) {
        const segments = progressContainer.querySelectorAll('.progress-segment');
        segments.forEach((segment, index) => { segment.classList.toggle('active', index < step); });
        const labels = progressContainer.querySelectorAll('.progress-label');
        labels.forEach((label, index) => { label.classList.toggle('active', index === step - 1); });
    };
    startConversation = function(firstMessage) {
        welcomeScreen.style.display = 'none';
        choiceScreen.style.display = 'none';
        chatView.classList.remove('hidden');
        if (firstMessage.includes("—á—É–¥–æ–≤–æ")) { progressContainer.classList.remove('hidden'); }
        getAIResponse(firstMessage);
    };
    addMessage = function(sender, text, isHtml = false, isQuestion = false) {
        const wrapper = document.createElement('div');
        wrapper.className = `message-wrapper ${sender}`;
        if (sender === 'concierge') {
            const avatarImg = document.createElement('img');
            avatarImg.src = avatarUrl;
            avatarImg.className = 'chat-avatar';
            avatarImg.alt = '–ê—Å–∏—Å—Ç–µ–Ω—Ç TOBi';
            wrapper.appendChild(avatarImg);
        }
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
        if (isQuestion) { bubble.classList.add('question-bubble'); }
        if (isHtml) { bubble.innerHTML = text; } else { bubble.innerText = text; }
        wrapper.appendChild(bubble);
        chatBody.prepend(wrapper);
    };
    getAIResponse = async function(userMessage) {
        addMessage('user', userMessage);
        conversationHistory.push({ role: 'user', content: userMessage });
        clearQuickReplies();
        showTypingIndicator();
        try {
            const response = await fetch('/api/concierge', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ messages: conversationHistory }),
            });
            if (!response.ok) throw new Error('Network response was not ok.');
            const data = await response.json();
            const aiMessage = data.message;
            conversationHistory.push(aiMessage);
            processAIResponse(aiMessage.content);
        } catch (error) {
            console.error("Fetch Error:", error);
            processAIResponse("–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ.");
        }
    };
    showTypingIndicator = function() {
        if (document.querySelector('.typing-indicator')) return;
        const wrapper = document.createElement('div');
        wrapper.className = 'message-wrapper concierge typing-indicator';
        wrapper.innerHTML = `<img src="${avatarUrl}" class="chat-avatar" alt="TOBi –¥—Ä—É–∫—É—î"><div class="bubble"><span class="dot"></span><span class="dot"></span><span class="dot"></span></div>`;
        chatBody.prepend(wrapper);
    };
    removeTypingIndicator = function() {
        const indicator = document.querySelector('.typing-indicator');
        if (indicator) indicator.remove();
    };
    processAIResponse = function(text) {
        if (text.includes("|")) {
            const parts = text.split('|');
            const statement = parts[0].trim();
            const question = parts[1].trim();
            addMessage('concierge', statement, false, false);
            handleFinalQuestion(question);
        } else {
            const quoteRegex = /"(.*?)"/s;
            const matches = text.match(quoteRegex);
            if (matches && matches[1].length > 10) {
                const statementBeforeDraft = text.split('"')[0].trim();
                addMessage('concierge', statementBeforeDraft);
                createEditableDraft(matches[1]);
            } else {
                addMessage('concierge', text, false, false);
            }
        }
        removeTypingIndicator();
    };
    handleFinalQuestion = function(question) {
        addMessage('concierge', question, false, true);
        if (question.includes("–º–µ—Ç–∞ –≤–∞—à–æ–≥–æ –≤—ñ–∑–∏—Ç—É")) {
            updateProgressBar(1);
            const tier1Options = ["üì± –ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω/–ø—Ä–∏—Å—Ç—Ä—ñ–π", "üîÑ –ó–º—ñ–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É", "üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "üí≥ –û–ø–ª–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É", "üë§ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"];
            createMultiSelectButtons(tier1Options, 'purpose');
        } else if (question.includes("–≤—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è")) {
            updateProgressBar(2);
            const tier2Options = ["‚≠ê –ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏", "üí® –®–≤–∏–¥–∫–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "üè¨ –ß–∏—Å—Ç–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ", "üëç –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ—Ü–µ—Å", "ü§ù –ü—Ä–æ–±–ª–µ–º—É –≤–∏—Ä—ñ—à–µ–Ω–æ"];
            createMultiSelectButtons(tier2Options, 'experience');
        }
    };
    createEditableDraft = function(reviewText) {
        updateProgressBar(3);
        clearQuickReplies();
        const container = document.createElement('div');
        container.className = 'review-draft-container';
        container.classList.add('pulsing-highlight');
        container.addEventListener('focusin', () => { container.classList.remove('pulsing-highlight'); }, { once: true });
        const textArea = document.createElement('textarea');
        textArea.id = 'review-draft-textarea';
        textArea.className = 'review-draft-textarea';
        textArea.value = reviewText;
        container.appendChild(textArea);
        chatBody.prepend(container);
        addMessage('concierge', '–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç. –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.', false, true);
        createPostButtons();
    };
});
