document.addEventListener('DOMContentLoaded', () => {
    const contentArea = document.getElementById('content-area');
    const welcomeScreen = document.getElementById('welcome-screen');
    const choiceScreen = document.getElementById('choice-screen');
    const chatView = document.getElementById('chat-view');
    const recoveryScreen = document.getElementById('recovery-screen');
    const chatBody = document.getElementById('chat-body');
    const quickRepliesContainer = document.getElementById('quick-replies-container');
    const progressContainer = document.getElementById('progress-container');

    // –ì–æ–ª–æ–≤–Ω–∏–π —Å–ª—É—Ö–∞—á –¥–ª—è —Å—Ç–∞—Ç–∏—á–Ω–∏—Ö –µ–∫—Ä–∞–Ω—ñ–≤
    contentArea.addEventListener('click', (event) => {
        const button = event.target.closest('button');
        if (!button) return;
        const buttonId = button.id;
        switch (buttonId) {
            case 'great-btn': welcomeScreen.style.display = 'none'; choiceScreen.classList.remove('hidden'); break;
            case 'okay-btn': case 'bad-btn': welcomeScreen.style.display = 'none'; recoveryScreen.classList.remove('hidden'); break;
            case 'ai-draft-btn': choiceScreen.style.display = 'none'; startConversation("–í—Å–µ –±—É–ª–æ —á—É–¥–æ–≤–æ!"); break;
            case 'manual-review-btn': window.open(googleReviewUrl, '_blank'); choiceScreen.innerHTML = `<h1 class="main-title">–î—è–∫—É—î–º–æ!</h1><p class="subtitle">–ú–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ Google —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.</p>`; break;
            case 'request-assistance-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏...'); break;
            case 'schedule-callback-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞...'); break;
            case 'start-return-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...'); break;
            case 'google-review-fallback-btn': window.open(googleReviewUrl, '_blank'); recoveryScreen.innerHTML = `<h1 class="main-title">–î—è–∫—É—î–º–æ!</h1><p class="subtitle">–ú–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ Google —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.</p>`; break;
        }
    });

    // --- –û–°–ù–û–í–ù–ê –ó–ú–Ü–ù–ê –¢–£–¢: –Ñ–î–ò–ù–ò–ô –°–õ–£–•–ê–ß –î–õ–Ø –í–°–Ü–• –î–ò–ù–ê–ú–Ü–ß–ù–ò–• –ö–ù–û–ü–û–ö ---
    quickRepliesContainer.addEventListener('click', (event) => {
        const button = event.target.closest('button');
        if (!button) return;

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é data-–∞—Ç—Ä–∏–±—É—Ç—ñ–≤
        const action = button.dataset.action;

        if (action === 'toggle-option') {
            // –î—ñ—è 1: –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–∏ –≤–∏–±—ñ—Ä –æ–ø—Ü—ñ—ó
            button.classList.toggle('selected');
        } else if (action === 'continue-multi-select') {
            // –î—ñ—è 2: –ù–∞—Ç–∏—Å–Ω—É—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª—ñ"
            const selectedButtons = quickRepliesContainer.querySelectorAll('.quick-reply-btn.selected');
            const selectedKeywords = Array.from(selectedButtons).map(btn => btn.innerText);
            
            const step = button.dataset.step; // –û—Ç—Ä–∏–º—É—î–º–æ –∫—Ä–æ–∫ –∑ –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
            let combinedMessage = selectedKeywords.length > 0 ? selectedKeywords.join(', ') : "–ù—ñ—á–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –≤–∏–¥—ñ–ª–µ–Ω–æ";
            
            if (step === 'purpose') {
                combinedMessage = `–ú–µ—Ç–∞ –≤—ñ–∑–∏—Ç—É: ${combinedMessage}`;
            } else if (step === 'experience') {
                combinedMessage = `–í—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: ${combinedMessage}`;
            }
            getAIResponse(combinedMessage);
        } else if (action === 'regenerate') {
            // –î—ñ—è 3: –ó–∞–ø—Ä–æ—Å–∏—Ç–∏ —ñ–Ω—à—É –≤–µ—Ä—Å—ñ—é
            getAIResponse("–¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º —Ç–µ, —Å–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.", true);
        } else if (action === 'post-google') {
            // –î—ñ—è 4: –û–ø—É–±–ª—ñ–∫—É–≤–∞—Ç–∏ –≤ Google
            const draftText = document.getElementById('review-draft-textarea').value;
            window.open(googleReviewUrl, '_blank');
            navigator.clipboard.writeText(draftText);
            clearQuickReplies();
            addMessage('concierge', "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!");
        }
    });

    function updateProgressBar(step) {
        const segments = progressContainer.querySelectorAll('.progress-segment');
        segments.forEach((segment, index) => { segment.classList.toggle('active', index < step); });
        const labels = progressContainer.querySelectorAll('.progress-label');
        labels.forEach((label, index) => { label.classList.toggle('active', index === step - 1); });
    }

    function startConversation(firstMessage) {
        welcomeScreen.style.display = 'none'; choiceScreen.style.display = 'none'; chatView.classList.remove('hidden');
        if (firstMessage.includes("—á—É–¥–æ–≤–æ")) { progressContainer.classList.remove('hidden'); }
        getAIResponse(firstMessage);
    }

    let conversationHistory = [];
    const placeId = 'Your_Google_Place_ID_Here';
    const googleReviewUrl = `https://search.google.com/local/writereview?placeid=${placeId}`;
    const avatarUrl = 'https://ucarecdn.com/c679e989-5032-408b-ae8a-83c7d204c67d/Vodafonebot.webp';

    function addMessage(sender, text, isHtml = false, isQuestion = false) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    async function getAIResponse(userMessage) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function showTypingIndicator() { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function removeTypingIndicator() { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function processAIResponse(text) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function handleFinalQuestion(question) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    function createEditableDraft(reviewText) { /* ... –±–µ–∑ –∑–º—ñ–Ω ... */ }
    
    function createMultiSelectButtons(options, step) {
        clearQuickReplies();
        options.forEach(optionText => {
            const button = document.createElement('button');
            button.className = 'quick-reply-btn';
            button.innerText = optionText;
            button.dataset.action = 'toggle-option'; // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é
            quickRepliesContainer.appendChild(button);
        });
        const continueButton = document.createElement('button');
        continueButton.className = 'quick-reply-btn continue-btn';
        continueButton.innerText = '–î–∞–ª—ñ';
        continueButton.dataset.action = 'continue-multi-select'; // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é
        continueButton.dataset.step = step; // –î–æ–¥–∞—î–º–æ –∫—Ä–æ–∫ –¥–ª—è —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        quickRepliesContainer.appendChild(continueButton);
    }

    function createPostButtons() {
        clearQuickReplies();
        const regenerateButton = document.createElement('button');
        regenerateButton.className = 'quick-reply-btn';
        regenerateButton.innerText = 'üîÑ –Ü–Ω—à–∞ –≤–µ—Ä—Å—ñ—è';
        regenerateButton.dataset.action = 'regenerate'; // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é
        
        const postButton = document.createElement('button');
        postButton.className = 'quick-reply-btn primary-action choice-button'; 
        postButton.dataset.action = 'post-google'; // –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –¥—ñ—é
        postButton.innerHTML = `<div class="button-main-text">‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏ Google –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó</div><div class="button-sub-text">–í–∞—à –≤—ñ–¥–≥—É–∫ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—Ç–µ —Ç–∞ –æ—Ü—ñ–Ω—ñ—Ç—å</div>`;
        
        quickRepliesContainer.appendChild(regenerateButton);
        quickRepliesContainer.appendChild(postButton);
    }

    function clearQuickReplies() {
        quickRepliesContainer.innerHTML = '';
    }

    // --- –ü–æ–≤–Ω—ñ —Ç—ñ–ª–∞ —Ñ—É–Ω–∫—Ü—ñ–π –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏ (–±–µ–∑ –∑–º—ñ–Ω) ---
    addMessage = function(sender, text, isHtml = false, isQuestion = false) { const wrapper = document.createElement('div'); wrapper.className = `message-wrapper ${sender}`; if (sender === 'concierge') { const avatarImg = document.createElement('img'); avatarImg.src = avatarUrl; avatarImg.className = 'chat-avatar'; avatarImg.alt = '–ê—Å–∏—Å—Ç–µ–Ω—Ç TOBi'; wrapper.appendChild(avatarImg); } const bubble = document.createElement('div'); bubble.className = 'bubble'; if (isQuestion) { bubble.classList.add('question-bubble'); } if (isHtml) { bubble.innerHTML = text; } else { bubble.innerText = text; } wrapper.appendChild(bubble); chatBody.prepend(wrapper); }
    getAIResponse = async function(userMessage) { addMessage('user', userMessage); conversationHistory.push({ role: 'user', content: userMessage }); clearQuickReplies(); showTypingIndicator(); try { const response = await fetch('/api/concierge', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ messages: conversationHistory }), }); if (!response.ok) throw new Error('Network response was not ok.'); const data = await response.json(); const aiMessage = data.message; conversationHistory.push(aiMessage); processAIResponse(aiMessage.content); } catch (error) { console.error("Fetch Error:", error); processAIResponse("–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º. –°–ø—Ä–æ–±—É–π—Ç–µ, –±—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–∑–Ω—ñ—à–µ."); } }
    showTypingIndicator = function() { if (document.querySelector('.typing-indicator')) return; const wrapper = document.createElement('div'); wrapper.className = 'message-wrapper concierge typing-indicator'; wrapper.innerHTML = `<img src="${avatarUrl}" class="chat-avatar" alt="TOBi –¥—Ä—É–∫—É—î"><div class="bubble"><span class="dot"></span><span class="dot"></span><span class="dot"></span></div>`; chatBody.prepend(wrapper); }
    removeTypingIndicator = function() { const indicator = document.querySelector('.typing-indicator'); if (indicator) indicator.remove(); }
    processAIResponse = function(text) { if (text.includes("|")) { const parts = text.split('|'); const statement = parts[0].trim(); const question = parts[1].trim(); addMessage('concierge', statement, false, false); handleFinalQuestion(question); } else { const quoteRegex = /"(.*?)"/s; const matches = text.match(quoteRegex); if (matches && matches[1].length > 10) { const statementBeforeDraft = text.split('"')[0].trim(); addMessage('concierge', statementBeforeDraft); createEditableDraft(matches[1]); } else { addMessage('concierge', text, false, false); } } removeTypingIndicator(); }
    handleFinalQuestion = function(question) { addMessage('concierge', question, false, true); if (question.includes("–º–µ—Ç–∞ –≤–∞—à–æ–≥–æ –≤—ñ–∑–∏—Ç—É")) { updateProgressBar(1); const tier1Options = ["üì± –ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω/–ø—Ä–∏—Å—Ç—Ä—ñ–π", "üîÑ –ó–º—ñ–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É", "üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "üí≥ –û–ø–ª–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É", "üë§ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"]; createMultiSelectButtons(tier1Options, 'purpose'); } else if (question.includes("–≤—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è")) { updateProgressBar(2); const tier2Options = ["‚≠ê –ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏", "üí® –®–≤–∏–¥–∫–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "üè¨ –ß–∏—Å—Ç–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ", "üëç –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ—Ü–µ—Å", "ü§ù –ü—Ä–æ–±–ª–µ–º—É –≤–∏—Ä—ñ—à–µ–Ω–æ"]; createMultiSelectButtons(tier2Options, 'experience'); } }
    createEditableDraft = function(reviewText) { updateProgressBar(3); clearQuickReplies(); const container = document.createElement('div'); container.className = 'review-draft-container'; container.classList.add('pulsing-highlight'); container.addEventListener('focusin', () => { container.classList.remove('pulsing-highlight'); }, { once: true }); const textArea = document.createElement('textarea'); textArea.id = 'review-draft-textarea'; textArea.className = 'review-draft-textarea'; textArea.value = reviewText; container.appendChild(textArea); chatBody.prepend(container); addMessage('concierge', '–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç. –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.', false, true); createPostButtons(); }
});
