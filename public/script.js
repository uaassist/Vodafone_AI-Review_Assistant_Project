document.addEventListener('DOMContentLoaded', () => {
    // ... (–≤—Å—ñ —Å–µ–ª–µ–∫—Ç–æ—Ä–∏ —Ç–∞ –ø–æ—á–∞—Ç–∫–æ–≤—ñ —Å–ª—É—Ö–∞—á—ñ –ø–æ–¥—ñ–π –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω) ...
    
    // –û–°–ù–û–í–ù–ê –ó–ú–Ü–ù–ê –¢–£–¢: –õ–û–ì–Ü–ö–ê –û–ë–†–û–ë–ö–ò –í–Ü–î–ü–û–í–Ü–î–Ü
    async function getAIResponse(userMessage) {
        addMessage('user', userMessage);
        conversationHistory.push({ role: 'user', content: userMessage });
        clearQuickReplies();
        showTypingIndicator();
        try {
            const response = await fetch('/api/concierge', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ messages: conversationHistory }),
            });
            if (!response.ok) throw new Error('Network response was not ok.');
            
            // –¢–µ–ø–µ—Ä –º–∏ –æ—á—ñ–∫—É—î–º–æ JSON –æ–±'—î–∫—Ç
            const aiResponseObject = await response.json();
            
            // –ú–∏ –Ω–µ –¥–æ–¥–∞—î–º–æ –≤–µ—Å—å –æ–±'—î–∫—Ç –≤ —ñ—Å—Ç–æ—Ä—ñ—é, –∞ –ª–∏—à–µ —Ç–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –®–Ü
            if (aiResponseObject.draft) {
                conversationHistory.push({ role: 'assistant', content: aiResponseObject.draft });
            }

            processAIResponse(aiResponseObject);
        } catch (error) {
            console.error("Fetch Error:", error);
            processAIResponse({ type: 'message', text: "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –∑—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è–º." });
        }
    }

    function processAIResponse(responseObject) {
        removeTypingIndicator();

        switch (responseObject.type) {
            case 'question':
                if (responseObject.statement) {
                    addMessage('concierge', responseObject.statement);
                }
                handleFinalQuestion(responseObject.question, responseObject.step);
                break;
            
            case 'draft':
                if (responseObject.statement) {
                    addMessage('concierge', responseObject.statement);
                }
                createEditableDraft(responseObject.draft);
                // –î–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è: –≤–∏–≤–æ–¥–∏–º–æ –∞–Ω–∞–ª—ñ–∑ –®–Ü –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞
                console.log('AI Analysis:', responseObject.analysis);
                break;
            
            case 'message':
                addMessage('concierge', responseObject.text);
                break;
        }
    }

    function handleFinalQuestion(question, step) {
        addMessage('concierge', question, false, true);
        updateProgressBar(step);
        
        if (step === 1) { // –ú–µ—Ç–∞ –≤—ñ–∑–∏—Ç—É
            const tier1Options = ["üì± –ù–æ–≤–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω/–ø—Ä–∏—Å—Ç—Ä—ñ–π", "üîÑ –ó–º—ñ–Ω–∞/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞—Ä–∏—Ñ—É", "üîß –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞", "üí≥ –û–ø–ª–∞—Ç–∞ —Ä–∞—Ö—É–Ω–∫—É", "üë§ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞"];
            createMultiSelectButtons(tier1Options, 'purpose');
        } else if (step === 2) { // –í—Ä–∞–∂–µ–Ω–Ω—è
            const tier2Options = ["‚≠ê –ö–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω—ñ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∏", "üí® –®–≤–∏–¥–∫–µ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è", "üè¨ –ß–∏—Å—Ç–æ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω—ñ", "üëç –ü—Ä–æ—Å—Ç–∏–π –ø—Ä–æ—Ü–µ—Å", "ü§ù –ü—Ä–æ–±–ª–µ–º—É –≤–∏—Ä—ñ—à–µ–Ω–æ"];
            createMultiSelectButtons(tier2Options, 'experience');
        }
    }

    // --- –†–µ—à—Ç–∞ —Ñ–∞–π–ª—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –º–∞–π–∂–µ –±–µ–∑ –∑–º—ñ–Ω ---
    // ... (–≤—Å—ñ —ñ–Ω—à—ñ —Ñ—É–Ω–∫—Ü—ñ—ó, —Ç–∞–∫—ñ —è–∫ startConversation, addMessage, createPostButtons —ñ —Ç.–¥., –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è —Ç–∞–∫–∏–º–∏ –∂, —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –≤–µ—Ä—Å—ñ—ó)
    
    // –ü–æ–≤–Ω–∏–π –∫–æ–¥ –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏
    const contentArea = document.getElementById('content-area');
    const welcomeScreen = document.getElementById('welcome-screen');
    const choiceScreen = document.getElementById('choice-screen');
    const chatView = document.getElementById('chat-view');
    const recoveryScreen = document.getElementById('recovery-screen');
    const chatBody = document.getElementById('chat-body');
    const quickRepliesContainer = document.getElementById('quick-replies-container');
    const progressContainer = document.getElementById('progress-container');

    contentArea.addEventListener('click', (event) => {
        const button = event.target.closest('button');
        if (!button) return;
        const buttonId = button.id;
        const buttonText = button.innerText.trim();
        switch (buttonId) {
            case 'great-btn': welcomeScreen.style.display = 'none'; choiceScreen.classList.remove('hidden'); break;
            case 'okay-btn': case 'bad-btn': welcomeScreen.style.display = 'none'; recoveryScreen.classList.remove('hidden'); break;
            case 'ai-draft-btn': choiceScreen.style.display = 'none'; startConversation("–í—Å–µ –±—É–ª–æ —á—É–¥–æ–≤–æ!"); break;
            case 'manual-review-btn': window.open(googleReviewUrl, '_blank'); choiceScreen.innerHTML = `<h1 class="main-title">–î—è–∫—É—î–º–æ!</h1><p class="subtitle">–ú–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ Google —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.</p>`; break;
            case 'request-assistance-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –¥–æ —á–∞—Ç—É –ø—ñ–¥—Ç—Ä–∏–º–∫–∏...'); break;
            case 'schedule-callback-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –¥–∑–≤—ñ–Ω–∫–∞...'); break;
            case 'start-return-btn': alert('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è...'); break;
            case 'google-review-fallback-btn': window.open(googleReviewUrl, '_blank'); recoveryScreen.innerHTML = `<h1 class="main-title">–î—è–∫—É—î–º–æ!</h1><p class="subtitle">–ú–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –≤—ñ–¥–≥—É–∫—ñ–≤ Google —É –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ.</p>`; break;
        }
    });

    function updateProgressBar(step) {
        const segments = progressContainer.querySelectorAll('.progress-segment');
        segments.forEach((segment, index) => { segment.classList.toggle('active', index < step); });
        const labels = progressContainer.querySelectorAll('.progress-label');
        labels.forEach((label, index) => { label.classList.toggle('active', index === step - 1); });
    }

    function startConversation(firstMessage) {
        welcomeScreen.style.display = 'none';
        choiceScreen.style.display = 'none';
        chatView.classList.remove('hidden');
        if (firstMessage.includes("—á—É–¥–æ–≤–æ")) { progressContainer.classList.remove('hidden'); }
        getAIResponse(firstMessage);
    }

    let conversationHistory = [];
    const placeId = 'Your_Google_Place_ID_Here';
    const googleReviewUrl = `https://search.google.com/local/writereview?placeid=${placeId}`;
    const avatarUrl = 'https://ucarecdn.com/c679e989-5032-408b-ae8a-83c7d204c67d/Vodafonebot.webp';

    function addMessage(sender, text, isHtml = false, isQuestion = false) {
        const wrapper = document.createElement('div');
        wrapper.className = `message-wrapper ${sender}`;
        if (sender === 'concierge') {
            const avatarImg = document.createElement('img');
            avatarImg.src = avatarUrl;
            avatarImg.className = 'chat-avatar';
            avatarImg.alt = '–ê—Å–∏—Å—Ç–µ–Ω—Ç TOBi';
            wrapper.appendChild(avatarImg);
        }
        const bubble = document.createElement('div');
        bubble.className = 'bubble';
        if (isQuestion) { bubble.classList.add('question-bubble'); }
        if (isHtml) { bubble.innerHTML = text; } else { bubble.innerText = text; }
        wrapper.appendChild(bubble);
        chatBody.prepend(wrapper);
    }

    function showTypingIndicator() { /* ... */ }
    function removeTypingIndicator() { /* ... */ }

    function createEditableDraft(reviewText) {
        updateProgressBar(3);
        clearQuickReplies();
        const container = document.createElement('div');
        container.className = 'review-draft-container';
        container.classList.add('pulsing-highlight');
        container.addEventListener('focusin', () => { container.classList.remove('pulsing-highlight'); }, { once: true });
        const textArea = document.createElement('textarea');
        textArea.id = 'review-draft-textarea';
        textArea.className = 'review-draft-textarea';
        textArea.value = reviewText;
        container.appendChild(textArea);
        chatBody.prepend(container);
        addMessage('concierge', '–í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–∫—Å—Ç. –ö–æ–ª–∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ñ, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.', false, true);
        createPostButtons();
    }

    function createMultiSelectButtons(options, step) {
        clearQuickReplies();
        options.forEach(optionText => {
            const button = document.createElement('button');
            button.className = 'quick-reply-btn';
            button.innerText = optionText;
            button.onclick = () => { button.classList.toggle('selected'); };
            quickRepliesContainer.appendChild(button);
        });
        const continueButton = document.createElement('button');
        continueButton.className = 'quick-reply-btn continue-btn';
        continueButton.innerText = '–î–∞–ª—ñ';
        continueButton.onclick = () => {
            const selectedButtons = quickRepliesContainer.querySelectorAll('.quick-reply-btn.selected');
            const selectedKeywords = Array.from(selectedButtons).map(btn => btn.innerText);
            let combinedMessage = selectedKeywords.length > 0 ? selectedKeywords.join(', ') : "–ù—ñ—á–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–µ –≤–∏–¥—ñ–ª–µ–Ω–æ";
            if (step === 'purpose') {
                combinedMessage = `–ú–µ—Ç–∞ –≤—ñ–∑–∏—Ç—É: ${combinedMessage}`;
            } else if (step === 'experience') {
                combinedMessage = `–í—Ä–∞–∂–µ–Ω–Ω—è –≤—ñ–¥ –æ–±—Å–ª—É–≥–æ–≤—É–≤–∞–Ω–Ω—è: ${combinedMessage}`;
            }
            getAIResponse(combinedMessage);
        };
        quickRepliesContainer.appendChild(continueButton);
    }

    function createPostButtons() {
        clearQuickReplies();
        const postButton = document.createElement('button');
        postButton.className = 'quick-reply-btn primary-action choice-button'; 
        postButton.innerHTML = `<div class="button-main-text">‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏ Google –¥–ª—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó</div><div class="button-sub-text">–í–∞—à –≤—ñ–¥–≥—É–∫ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—Ç–µ —Ç–∞ –æ—Ü—ñ–Ω—ñ—Ç—å</div>`;
        postButton.onclick = () => {
            const draftText = document.getElementById('review-draft-textarea').value;
            window.open(googleReviewUrl, '_blank');
            navigator.clipboard.writeText(draftText);
            clearQuickReplies();
            addMessage('concierge', "–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫!");
        };
        const regenerateButton = document.createElement('button');
        regenerateButton.className = 'quick-reply-btn';
        regenerateButton.innerText = 'üîÑ –Ü–Ω—à–∞ –≤–µ—Ä—Å—ñ—è';
        regenerateButton.onclick = () => { getAIResponse("–¶–µ –Ω–µ –∑–æ–≤—Å—ñ–º —Ç–µ, —Å–ø—Ä–æ–±—É–π, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–Ω—à–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç.", true); };
        quickRepliesContainer.appendChild(regenerateButton);
        quickRepliesContainer.appendChild(postButton);
    }

    function clearQuickReplies() {
        quickRepliesContainer.innerHTML = '';
    }
});
